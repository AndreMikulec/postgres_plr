
version: 1.0.{build}.{branch}

# Do not build on tags (GitHub and BitBucket)
skip_tags: true

# Start builds on tags only (GitHub and BitBucket)
# skip_non_tags: true

# Skipping commits affecting specific files (GitHub only).
skip_commits:
  files:
    - '**/*.md'
  message: /\[skip ci]/

# set clone depth
clone_depth: 1

environment:
  APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019
  APPVEYOR_SAVE_CACHE_ON_ERROR: true
  # PLR_TAG: REL8_4_1
  # temporary until Dave Cramer pushes tag REL8_4_2
  PLR_TAG: master
  PLR_TAG_SHORT: latest_commit
  PLRSOURCE: $(APPVEYOR_BUILD_FOLDER)\plr
  R_OLD_VERSION: 3.6.3
  R_OLD_VERSION_SHORT: 3.6
  R_CUR_VERSION: 4.0.3
  R_CUR_VERSION_SHORT: 4.0
  R_HOME: $(APPVEYOR_BUILD_FOLDER)\RINSTALL
  ZIPTMP: $(APPVEYOR_BUILD_FOLDER)\ZIPTMP

  matrix:

    - MSYSTEM: MINGW64
      MSYS2POSTGRESQLBINURLOLD: NONE
      PGINSTALL: C:/msys64/mingw64
      BUILD_CONFIG: Release
      R_ARCH: /x64
      COMPONENTS_ARCH: ',x64'

    - MSYSTEM: MINGW64
      MSYS2POSTGRESQLBINURLOLD: NONE
      PGINSTALL: C:/msys64/mingw64
      BUILD_CONFIG: Debug
      R_ARCH: /x64
      COMPONENTS_ARCH: ',x64'

    - MSYSTEM: MINGW32
      MSYS2POSTGRESQLBINURLOLD: NONE
      PGINSTALL: C:/msys64/mingw32
      BUILD_CONFIG: Release
      R_ARCH: /i386
      COMPONENTS_ARCH: ',i386'

    - MSYSTEM: MINGW64
      MSYS2POSTGRESQLBINURLOLD: http://repo.msys2.org/mingw/x86_64/mingw-w64-x86_64-postgresql-12.4-1-any.pkg.tar.zst
      PGINSTALL: C:/msys64/mingw64
      BUILD_CONFIG: Release
      R_ARCH: /x64
      COMPONENTS_ARCH: ',x64'

    - MSYSTEM: MINGW32
      MSYS2POSTGRESQLBINURLOLD: http://repo.msys2.org/mingw/i686/mingw-w64-i686-postgresql-12.4-1-any.pkg.tar.zst
      PGINSTALL: C:/msys64/mingw32
      BUILD_CONFIG: Release
      R_ARCH: /i386
      COMPONENTS_ARCH: ',i386'



matrix:
  allow_failures:
    - MSYSTEM: MINGW32
      MSYS2POSTGRESQLBINURLOLD: http://repo.msys2.org/mingw/i686/mingw-w64-i686-postgresql-12.4-1-any.pkg.tar.zst
    - MSYSTEM: MINGW64
      MSYS2POSTGRESQLBINURLOLD: http://repo.msys2.org/mingw/x86_64/mingw-w64-x86_64-postgresql-12.4-1-any.pkg.tar.zst

init:
  - "@echo off"

install:
  - echo ************* skipping tests (ALWAYS getting this error) *************
  - echo USE_PGXS=1 installcheck PGUSER=postgres || (cat regression.diffs && false)
  - echo make [C:/msys64/mingw64/lib/POSTGR~1/pgxs/src/MAKEFI~1/pgxs.mk 420 installcheck] Error 1
  - echo create extension plr;
  - echo +ERROR:  could not load library "C:/msys64/mingw64/lib/postgresql/plr.dll" The specified module could not be found.
  - echo ***********************************************************************
  #
  - PATH C:\msys64\%MSYSTEM%\bin;C:\msys64\usr\bin;C:\msys64\bin;%PATH%
  #
  ## system ##
  #
  - pacman --noconfirm -Syuu
  - pacman --noconfirm -Suu
  #
  ## postgresql ##

  #
  # current-ish version - may be release six(6) months after the PG release date - or later
  #
  # always install . . . later - sometimes - maybe - attempt a downgrade
  #
  - sh -login -c "pacman --noconfirm -S --needed ${MINGW_PACKAGE_PREFIX}-postgresql"
  #
  #
  # this OLD(er) version - may or "may not" work
  #
  # How to obtain older versions of packages using MSYS2?
  # 2015
  # https://stackoverflow.com/questions/33969803/how-to-obtain-older-versions-of-packages-using-msys2
  #
  - if not "%MSYS2POSTGRESQLBINURLOLD%" == "NONE" bash -login -c 'curl   -o             install.pkg.tar.zst ${MSYS2POSTGRESQLBINURLOLD}'
  - if not "%MSYS2POSTGRESQLBINURLOLD%" == "NONE" bash -login -c 'pacman -U --noconfirm install.pkg.tar.zst'
  # warning: downgrading package mingw-w64-x86_64-postgresql (13.1-1 => 12.4-1)
  # resolving dependencies...
  # looking for conflicting packages...

  #
  # fancy build date
  - sh -login -c "echo $(date '+%Ym%md%d') > $(cygpath ${APPVEYOR_BUILD_FOLDER})/FANCY_BUILD_DAY.txt"
  - for /f "delims=" %%i in (FANCY_BUILD_DAY.txt) do (set FANCY_BUILD_DAY=%%i)
  - type  FANCY_BUILD_DAY.txt
  - echo %FANCY_BUILD_DAY%
  #
  # attempt to get the PG version
  #
  - sh -login -c "postgres -V | grep -oP '(?<=\) ).*$' > $(cygpath ${APPVEYOR_BUILD_FOLDER})/PG_VERSION.txt"
  - for /f "delims=" %%i in (PG_VERSION.txt) do (set PG_VERSION=%%i)
  - type  PG_VERSION.txt
  - echo %PG_VERSION%
  #
  - sh -login -c "cat $(cygpath ${APPVEYOR_BUILD_FOLDER})/PG_VERSION.txt | grep -oP '^\d+' > ${APPVEYOR_BUILD_FOLDER})/PG_VERSION_SHORT.txt"
  - for /f "delims=" %%i in (PG_VERSION_SHORT.txt) do (set PG_VERSION_SHORT=%%i)
  - type  PG_VERSION_SHORT.txt
  - echo %PG_VERSION_SHORT%
  #
  # attempt to get the PG share and lib directories offset
  #
  - bash --login -c "$(cygpath ${APPVEYOR_BUILD_FOLDER})/MSYS2POSTGRESQLBIN-DIRPOSTGRESQL.sh"
  - for /f "delims=" %%i in (DIRPOSTGRESQL.txt) do (set DIRPOSTGRESQL=%%i)
  - type  DIRPOSTGRESQL.txt
  - echo %DIRPOSTGRESQL%

  #
  ## tool to save artifacts ##
  #
  - sh -login -c "pacman -S --noconfirm --needed msys/tar"
  #
  ## plr ##
  #
  # Because Dave Cramer sometimes does not update the tag, therefore, I can not rely on the tag
  #                                              branch or tag
  - git clone --depth 1 --single-branch --branch=%PLR_TAG%       https://github.com/postgres-plr/plr.git  %PLRSOURCE%
  #
  - cd %PLRSOURCE%
  - for /f "delims=" %%i in ('git rev-parse --short HEAD') do (set PLR_GIT_COMMIT=%%i)
  - cd %APPVEYOR_BUILD_FOLDER%

  #
  # acquire R
  #
  - if not exist R-%R_OLD_VERSION%-win.exe curl https://cran.r-project.org/bin/windows/base/old/%R_OLD_VERSION%/R-%R_OLD_VERSION%-win.exe -o R-%R_OLD_VERSION%-win.exe
  - if not exist R-%R_CUR_VERSION%-win.exe curl https://cran.r-project.org/bin/windows/base/old/%R_CUR_VERSION%/R-%R_CUR_VERSION%-win.exe -o R-%R_CUR_VERSION%-win.exe
  #
  ## place OLD R on disk ##
  #
  - R-%R_OLD_VERSION%-win.exe /SP- /VERYSILENT /DIR=%R_HOME%OLD /COMPONENTS=main%COMPONENTS_ARCH%,translations /NOICONS /TASKS=
  #
  ## place CUR R on disk ##
  #
  - R-%R_CUR_VERSION%-win.exe /SP- /VERYSILENT /DIR=%R_HOME%CUR /COMPONENTS=main%COMPONENTS_ARCH%,translations /NOICONS /TASKS=

# also does the test
build_script:
  - bash --login -c "$(cygpath ${APPVEYOR_BUILD_FOLDER})/MSYS2POSTGRESQLBIN-plr-full-build.sh"

on_success:
  - bash --login -c "$(cygpath ${APPVEYOR_BUILD_FOLDER})/MSYS2POSTGRESQLBIN-plr-full-on-success.sh"

artifacts:
  - path: 'PLR_MSYS2POSTGRESQLBIN_%APPVEYOR_BUILD_VERSION%_%FANCY_BUILD_DAY%_PLR_*.tar.gz'
    name: "PLR_MSYS2POSTGRESQLBIN_%APPVEYOR_BUILD_VERSION%_%FANCY_BUILD_DAY%_PLR_%PLR_TAG_SHORT%_%PLR_GIT_COMMIT%_%MSYSTEM%_PG_%PG_VERSION_SHORT%_R_%R_CUR_VERSION_SHORT%_AND_R_%R_OLD_VERSION_SHORT%_%BUILD_CONFIG%"

cache:
  - 'R-%R_OLD_VERSION%-win.exe'
  - 'R-%R_CUR_VERSION%-win.exe'

deploy:
  - provider: GitHub
    release: "PLR_%APPVEYOR_BUILD_VERSION%_%FANCY_BUILD_DAY%_PLR_%PLR_TAG_SHORT%_%PLR_GIT_COMMIT%_PG_%PG_VERSION_SHORT%_R_%R_CUR_VERSION_SHORT%_AND_R_%R_OLD_VERSION_SHORT%"
    auth_token:
      secure: KzS1DumC2yBg2LGN9x3AemHFOjAdp+rD58rW5aGGpwW4Pfdwdm7AmRpYKprPY8Gs
    artifact: "PLR_MSYS2POSTGRESQLBIN_%APPVEYOR_BUILD_VERSION%_%FANCY_BUILD_DAY%_PLR_%PLR_TAG_SHORT%_%PLR_GIT_COMMIT%_%MSYSTEM%_PG_%PG_VERSION_SHORT%_R_%R_CUR_VERSION_SHORT%_AND_R_%R_OLD_VERSION_SHORT%_%BUILD_CONFIG%"
    draft: false
    prerelease: false

notifications:
  - provider: Email
    on_build_success: false
    on_build_failure: false
    on_build_status_changed: false
